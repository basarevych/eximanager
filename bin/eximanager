#!/usr/bin/env node

'use strict'

var argv            = require('minimist')(process.argv.slice(2)),
    ServiceLocator  = require('../src/service-locator.js'),
    Console         = require('../src/console.js'),
    FileManager     = require('../src/file-manager.js'),
    Table           = require('../src/table.js'),
    Init            = require('../src/init.js'),
    Domain          = require('../src/domain.js'),
    Ip              = require('../src/ip.js');

var sl = new ServiceLocator(),
    cons = new Console(sl),
    manager = new FileManager(sl),
    table = new Table(sl),
    init = new Init(sl),
    domain = new Domain(sl),
    ip = new Ip(sl);

if (argv['_'].length == 0)
    showUsage();

if (argv['_'].length && argv['_'][0] != 'init' && !sl.has('config')) {
    var rl = cons.getReadline();

    rl.write("\nError:\t\tEximanager is not initialized\n");
    rl.write("\t\tPlease run 'eximanager init' before using\n\n");
    rl.close();

    process.exit(2);
}

switch (argv['_'][0]) {
    case 'help':
        showUsage(argv['_'].length > 1 ? argv['_'][1] : 'help');
        break;

    case 'init':
        var dir = argv['d'] ? argv['d'] : argv['dir'];
        if (!dir)
            showUsage('init');

        init.createConfig(dir);
        break;

    case 'domain-get':
        domain.get(argv['_'].length > 1 ? argv['_'][1] : null);
        break;

    case 'domain-set':
        var name = argv['_'].length > 1 ? argv['_'][1] : null,
            mx = argv['m'] ? argv['m'] : argv['mx'];
        domain.set(name, mx);
        break;

    case 'domain-del':
        if (argv['_'].length <= 1)
            showUsage('domain-del');
        else
            domain.del(argv['_'][1]);
        break;

    case 'ip-get':
        ip.get(argv['_'].length > 1 ? argv['_'][1] : null);
        break;

    case 'ip-set':
        if (argv['_'].length <= 2)
            showUsage('ip-set');
        else
            ip.set(argv['_'][1], argv['_'][2]);
        break;

    case 'ip-del':
        if (argv['_'].length <= 1)
            showUsage('ip-del');
        else
            ip.del(argv['_'][1]);
        break;

    default:
        var rl = cons.getReadline();
        rl.write("\nError: \t\tUnkown command: " + argv['_'][0] + "\n\n");
        rl.close();
        process.exit(1);
}

function showUsage(command) {
    var rl = cons.getReadline();

    rl.write("\n");
    switch (command) {
        case 'help':
            rl.write("Usage:\teximanager help <command>\n\n");
            rl.write("\tPrint usage info on <command>\n\n");
            rl.write("Note:\tRun eximanager without arguments to get list of commands\n");
            break;

        case 'init':
            rl.write("Usage:\teximanager init -d|--dir <configuration-directory>\n\n");
            rl.write("\tCreate configuration file (eximanager.conf.js)\n");
            rl.write("\t<configuration-directory> is either /etc or /usr/local/etc\n");
            break;

        case 'domain-get':
            rl.write("Usage:\teximanager domain-get [<regexp-filter>]\n\n");
            rl.write("\tPrint defined virtual mail domains\n\n");
            rl.write("\teximanager domain-get '^ex.*com$'\n");
            rl.write("\tWill print all the domains starting with \"ex\" and ending with \"com\"\n");
            break;

        case 'domain-set':
            rl.write("Usage:\teximanager domain-set <name> [-m|--mx <domain-name>]\n\n");
            rl.write("\tCreate/modify virtual main domain\n\n");
            rl.write("\teximanager domain-set example.com --mx mx.example.com\n");
            rl.write("\tWill create domain \"example.com\" (if it does not exist)\n");
            rl.write("\tand set it's MX to \"mx.example.com\"\n");
            break;

        case 'domain-del':
            rl.write("Usage:\teximanager domain-del <domain-name>\n\n");
            rl.write("\tDelete domain configuration data\n\n");
            rl.write("\teximanager domain-del example.com\n");
            rl.write("\tWill delete the domain \"example.com\".\n\n");
            rl.write("\tNote: Domain mail (in eximanager.conf.js:data_dir) will not be deleted.\n");
            rl.write("\t      You will need to delete it by hand.\n");
            break;

        case 'ip-get':
            rl.write("Usage:\teximanager ip-get [<regexp-filter>]\n\n");
            rl.write("\tPrint configured IP addresses list\n\n");
            rl.write("\teximanager ip-get '^1\\.'\n");
            rl.write("\tWill print all the IP addresses starting with \"1.\"\n");
            break;

        case 'ip-set':
            rl.write("Usage:\teximanager ip-set <ip-address> <domain-name>\n\n");
            rl.write("\tCreate/modify IP address\n\n");
            rl.write("\teximanager ip-set 1.2.3.4 mx.example.com\n");
            rl.write("\tWill assign name \"mx.example.com\" to IP address \"1.2.3.4\"\n");
            break;

        case 'ip-del':
            rl.write("Usage:\teximanager ip-del <ip-address>\n\n");
            rl.write("\tDelete an IP address\n\n");
            rl.write("\teximanager ip-del 1.2.3.4\n");
            rl.write("\tWill delete the IP address \"1.2.3.4\".\n");
            break;

        default:
            rl.write("Usage:\t\teximanager <command> [options]\n");
            rl.write("\nCommands:");
            rl.write("\thelp\t\tPrint help screen\n");
            rl.write("\t\tinit\t\tInitialize Eximanager\n");
            rl.write("\t\tdomain-get\tFiltered list of virtual domains\n");
            rl.write("\t\tdomain-set\tCreate or modify a virtual domain\n");
            rl.write("\t\tdomain-del\tDelete a virtual domain\n");
            rl.write("\t\tip-get\t\tFiltered list of IP addresses\n");
            rl.write("\t\tip-set\t\tCreate or modify an IP address\n");
            rl.write("\t\tip-del\t\tDelete an IP address\n");
            rl.write("\nNote:\t\tRun \"eximanager help <command>\" for help on the command\n");
    }

    rl.write("\n");
    rl.close();

    process.exit(1);
}
